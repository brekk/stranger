import type { Seed } from "./Types"
import { Seed } from "./Types"
import { LCG_C, LCG_A, LCG_M, SEED_MIN, SEED_MAX } from "./Constants"
import { ensureBetween, perturbation } from "./Logic"


// This code partially based upon: https://github.com/purescript/purescript-lcg/blob/master/src/Random/LCG.purs
// which has a BSD-3 License - https://github.com/purescript/purescript-lcg/blob/master/LICENSE


unSeed :: Seed -> Integer
export unSeed = where {
  Seed(x) =>
    x
}

seedMap :: (Integer -> Integer) -> Seed -> Seed
export seedMap = (fn, seed) => pipe(
  unSeed,
  fn,
  Seed,
)(seed)

// Perturb a seed value
perturb :: Integer -> Seed -> Seed
export perturb = (d, seed) => seedMap(
  perturbation($, LCG_A, d, LCG_M),
)(seed)

export ensureSeedable = ensureBetween(SEED_MIN, SEED_MAX)

mkSeed :: Integer -> Seed
export mkSeed = pipe(
  ensureSeedable,
  Seed,
)

// next the linear congruential generator
next :: Seed -> Seed
export next = perturb(LCG_C)

