import type { ComparisonResult } from "Compare"

import IO from "IO"
import Math from "Math"
import { Just, Nothing } from "Maybe"
import Number from "Number"



// This code is heavily based upon: https://github.com/purescript/purescript-lcg/blob/master/src/Random/LCG.purs
// which has a BSD-3 License - https://github.com/purescript/purescript-lcg/blob/master/LICENSE

// ## Constants

// The *modulus*: a magic constant for the linear congruential generator.
// It is equal to 2^31 - 1, a Mersenne prime. It is useful for this value to
// be prime, because then the requirement of the initial seed being coprime
// to the modulus is satisfied when the seed is between 1 and LCG_M - 1.
LCG_M :: Integer
export LCG_M = 2147483647

// The minimum permissible Seed value
SEED_MIN :: Integer
export SEED_MIN = 1

// The maximum permissible Seed value
SEED_MAX :: Integer
export SEED_MAX = LCG_M - 1

// The *multiplier*: a magic constant for the linear congruential generator
LCG_A :: Integer
export LCG_A = 48271

// The *increment*: a magic constant for the linear congruential generator
LCG_C :: Integer
export LCG_C = 0

// ## Types

// A seed for the linear congruential generator. We omit a `Semiring`
// instance because there is no `zero` value, as 0 is not an acceptable
// seed for the generator.
export type Seed = Seed(Integer)

// ## Interfaces

interface Eq a => Seed a {
  compare :: a -> a -> ComparisonResult
}

instance Show Seed {
  show = (seed) => where(seed) {
    Seed(i) =>
      show(i)
  }
}

// ## Logic

unSeed :: Seed -> Integer
export unSeed = where {
  Seed(x) =>
    x
}

perturbation :: Integer -> Integer -> Integer -> Integer -> Integer
perturbation = (b, n, a, d) => pipe(
  map(Number.integerToFloat),
  where {
    [b2, n2, a2] =>
      Number.floatToInteger(b2 * n2 + a2)

    _ =>
      0
  },
  Math.mod($, d),
)([b, n, a])

// Perturb a seed value
perturb :: Integer -> Seed -> Seed
export perturb = (d, seed) => pipe(
  unSeed,
  perturbation(LCG_A, $, d, LCG_M),
  Seed,
)(seed)

ensureBetween :: Integer -> Integer -> Integer -> Integer
export ensureBetween = (min, max, x) => {
  y = Math.mod(x, max - min)
  return y < min ? y + max : y
}

export ensureSeedable = ensureBetween(SEED_MIN, SEED_MAX)

mkSeed :: Integer -> Seed
export mkSeed = pipe(
  ensureSeedable,
  Seed,
)

// next the linear congruential generator
next :: Seed -> Seed
export next = perturb(LCG_C)
