import type { Maybe } from "Maybe"

import type { Seed } from "./LCG"

import List from "List"
import Wish from "Wish"

import LCG from "./LCG"



/**
 * Create a new pseudo-random value, wrapped in a Wish
 * @since 0.0.1
 * @example
 * pipe(
 *   PRNG.create,
 * )(100)
 */
create :: Integer -> Wish a Seed
export create = pipe(
  LCG.mkSeed,
  of,
)

/**
 * Step a given PRNG instance one generation forward
 * @since 0.0.1
 * @example
 * pipe(
 *   PRNG.create,
 *   PRNG.step
 * )(100)
 */
step :: Wish a Seed -> Wish a Seed
export step = map(LCG.next)

stepN :: Integer -> Wish a Seed -> Wish a Seed
export stepN = (n, mSeed) => map(LCG.accumulate(LCG.next, n))(mSeed)

toFloat :: Wish a Seed -> Wish a Float
export toFloat = map(LCG.deriveFloat)

toBool :: Wish a Seed -> Wish a Boolean
export toBool = map(LCG.deriveBool)

binaryOperation :: (a -> Seed -> b) -> a -> Wish c Seed -> Wish c b
binaryOperation = (fn, a, mB) => map(fn(a), mB)

// pickFrom :: List a -> Wish b Seed -> Wish b (Maybe a)
// export pickFrom = (list, mSeed) => map(LCG.deriveChoice(list), mSeed)
export pickFrom = binaryOperation(LCG.deriveChoice)
