import { EQUAL, LESS, MORE } from "Compare"
import IO from "IO"
import List from "List"
import Math from "Math"
import { Just, Nothing } from "Maybe"
import Tuple from "Tuple"
import Wish from "Wish"

// import Number from "Number"
// import Wish from "Wish"
import type { Async } from "./PseudoRandom"
import type { Seed } from "./LCG"

import LCG from "./LCG"
import PRNG from "./PseudoRandom"

run :: Inspect a => String -> Integer -> (Wish String Seed -> Wish String a) -> {}
run = (key, seedNumber, fn) => pipe(
  PRNG.create,
  map(IO.trace(`${key} -->`)),
  fn,
  map(IO.trace(`${key} <--`)),
  Wish.fulfill((x) => { IO.trace(`${key} bad`, x) }, (x) => { IO.trace(`${key} good`, x) }),
)(seedNumber)

main = () => {
  run("A", 100, map(PRNG.floatFromSeed))
  run(
    "B",
    100,
    pipe(
      map(LCG.next),
      map(LCG.next),
      map(LCG.next),
      map(LCG.next),
      map(PRNG.floatFromSeed),
    ),
  )
  run(
    "C",
    100,
    pipe(
      PRNG.stepN(4),
      map(PRNG.floatFromSeed),
    ),
  )
  run("D", 100, PRNG.stepFnN(4, PRNG.floatFromSeed))
  run("E", 100, pipe(
    PRNG.stepFnN(4, PRNG.floatFromSeed),
    map(PRNG.seededValues)
  ))
  run("INTEGER (step 4)", 100, pipe(
    PRNG.stepN(4),
    map(PRNG.randomInt(0, 100))
  ))
  run("INTEGERS", 100, pipe(
    PRNG.stepFnN(10, PRNG.randomInt(0, 100)),
    map(PRNG.seededValues)
  ))
}
