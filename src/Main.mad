// import Wish from "Wish"
import type { Seed } from "./Types"

import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"
import Number from "Number"
import String from "String"
import Wish from "Wish"

import LCG from "./LCG"



runLCG = (key, seedNumber, fn) => pipe(
  LCG.mkSeed,
  fn,
  IO.trace(`LCG ${key}`),
)(seedNumber)

main = () => {
  runLCG(
    "START",
    100,
    pipe(
      LCG.iterateWithProof(10, LCG.toInt(1, 10)),
    ),
  )
  IO.trace(
    "YO",
    pipe(
      LCG.mkSeed,
      LCG.iterateWithProof(10, LCG.toFloat),
      LCG.dropProof,
    )(100),
  )
  runLCG(
    "LCG :: B",
    100,
    pipe(
      LCG.next,
      LCG.next,
      LCG.next,
      LCG.next,
      LCG.toFloat,
    ),
  )
  runLCG(
    "INTEGERS",
    100,
    pipe(
      LCG.iterateWithProof(10, LCG.toInt(0, 100)),
      LCG.dropProof,
    ),
  )

  runLCG(
    "booleans",
    100,
    pipe(
      (LCG.iterate(10, LCG.toBool)),
    ),
  )
  runLCG(
    "pick!",
    100,
    pipe(
      LCG.iterateWithProof(
        100,
        pipe(
          LCG.pick(['a', 'b', 'c', 'd', 'e', 'f']),
          where {
            Just(x) =>
              x

            Nothing =>
              'x'
          },
        ),
      ),
      LCG.dropProof,
    ),
  )
  runLCG(
    "iterate!",
    100,
    pipe(
      LCG.iterate(10, LCG.pick(['x', 'y', 'z'])),
    ),
  )
  ALPHABET = String.split("", "abcdefghijklmnopqrstuvwxyz")
  // shuffle sucks in LCG.iterate
  runLCG(
    "iterate single shuffle!",
    100,
    pipe(
      LCG.iterate(
        10,
        pipe(
          LCG.swapWalk(ALPHABET),
          .stack,
        ),
      ),
    ),
  )
  runLCG(
    "iterateBinary single shuffle!",
    100,
    pipe(
      LCG.iterateBinary(
        10,
        (a, b) => pipe(
          LCG.swapWalk(a),
          .stack,
        )(b),
        ALPHABET,
      ),
    ),
  )
  runLCG(
    "iterateBinary shuffle!",
    100,
    pipe(
      LCG.iterateBinary(10, LCG.shuffle, ALPHABET),
    ),
  )
  IO.trace("mutation?", ALPHABET)
}
