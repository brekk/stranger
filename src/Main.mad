// import Wish from "Wish"
import type { Seed } from "./Types"

import IO from "IO"
import List from "List"
import { Just, Nothing } from "Maybe"
import Number from "Number"
import String from "String"
import Wish from "Wish"

import LCG from "./LCG"
import PRNG from "./PRNG"
import { stringToInt, stringToIntJS } from "./String"



runLCG = (key, seedNumber, fn) => pipe(
  LCG.mkSeed,
  fn,
  IO.trace(`LCG ${key}`),
)(seedNumber)

// run :: Inspect Seed => String -> Integer -> (Wish a Seed -> Wish a {}) -> {}
run = (key, seedNumber, fn) => pipe(
  PRNG.create,
  map(IO.trace(`run ${key} -->`)),
  fn,
  Wish.fulfill((a) => { IO.trace("bad " ++ key, a) }, (b) => { IO.trace("good " ++ key, b) }),
)(seedNumber)

main = () => {
  runLCG(
    "START",
    100,
    pipe(
      LCG.iterateWithProof(10, LCG.deriveInt(1, 10)),
    ),
  )
  IO.trace("yo", PRNG.create(stringToInt("shit")))
  IO.trace(
    "YO",
    pipe(
      LCG.mkSeed,
      LCG.iterateWithProof(10, LCG.deriveFloat),
      LCG.dropProof,
    )(100),
  )
  run("A", 100, map(LCG.deriveFloat))
  run(
    "B",
    100,
    pipe(
      PRNG.step,
      PRNG.step,
      PRNG.step,
      PRNG.step,
      map(LCG.deriveFloat),
    ),
  )
  runLCG(
    "LCG :: B",
    100,
    pipe(
      LCG.next,
      LCG.next,
      LCG.next,
      LCG.next,
      LCG.deriveFloat,
    ),
  )
  run(
    "C",
    100,
    pipe(
      PRNG.stepN(4),
      map(LCG.deriveFloat),
    ),
  )
  run("D", 100, PRNG.stepN(4))
  run(
    "E",
    100,
    map(
      pipe(
        LCG.iterateWithProof(4, LCG.deriveFloat),
        LCG.dropProof,
      ),
    ),
  )
  run(
    "INTEGER (step 4)",
    100,
    pipe(
      PRNG.stepN(4),
      map(LCG.deriveInt(0, 100)),
    ),
  )
  run(
    "INTEGERS",
    100,
    map(
      pipe(
        LCG.iterateWithProof(10, LCG.deriveInt(0, 100)),
        LCG.dropProof,
      ),
    ),
  )

  run(
    "booleans",
    100,
    pipe(
      map(LCG.iterate(10, LCG.deriveBool)),
    ),
  )
  runLCG(
    "pick!",
    100,
    pipe(
      LCG.iterateWithProof(
        100,
        pipe(
          LCG.deriveChoice(['a', 'b', 'c', 'd', 'e', 'f']),
          where {
            Just(x) =>
              x

            Nothing =>
              'x'
          },
        ),
      ),
      LCG.dropProof,
    ),
  )
  runLCG(
    "iterate!",
    100,
    pipe(
      LCG.iterate(10, LCG.deriveChoice(['x', 'y', 'z'])),
    ),
  )
  // shuffle sucks in LCG
  runLCG(
    "iterate shuffle!",
    100,
    pipe(
      LCG.iterate(10, LCG.deriveShuffle(String.split("", "abcdefghijklmnopqrstuvwxyz"))),
    ),
  )
  /*
          run(
            "iterate shuffle!",
            100,
            pipe(
              PRNG.iterate(10, LCG.deriveShuffle(String.split("", "abcdefghijklmnopqrstuvwxyz"))),
            ),
          )
          */
}

/*
      run(
        "SHUFFLE",
        100,
        pipe(
          PRNG.randomShuffle([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),
        ),
      )
      run(
        "SHUFFLE CHARS",
        100,
        pipe(
      "          PRNG.randomShuffle(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']),\n" +
        ),
      )
      words = ["cool", "nice", "awesome", "great", "fantastic"]
      run(
        "SHUFFLE WORDS",
        100,
        pipe(
          PRNG.randomShuffle(words),
        ),
      )
      run(
        "SHUFFLE WORDS different seed",
        101,
        pipe(
          PRNG.randomShuffle(words),
        ),
      )

      r = PRNG.generate(100)
      r.int(1, 10) |> IO.trace("int")
      r.float() |> IO.trace("float")
      r.bool() |> IO.trace("bool")
      r.pick(["apple", "banana", "crayon"]) |> IO.trace("int")
      r.shuffle(["hey", "hello", "yo", "sup", "hi", "greetings"]) |> IO.trace("shuffle")
      pipe(
        List.range(0),
        map((_) => r.int(1, 10)),
        IO.trace("10 ints"),
      )(10)
      */
